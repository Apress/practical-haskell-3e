(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun Language.Haskell.Liquid.Prelude.isEven () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805423$35$$35$d34H () Int)
(declare-fun lq_tmp$36$x$35$$35$1309 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805427$35$$35$d34L () Int)
(declare-fun GHC.Show.showParen () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun Language.Haskell.Liquid.Prelude.eq () Int)
(declare-fun Language.Haskell.Liquid.Prelude.liquidAssertB () Int)
(declare-fun GHC.Show.$36$dmshow () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun fst () Int)
(declare-fun Language.Haskell.Liquid.Prelude.minus () Int)
(declare-fun GHC.Show.showString () Int)
(declare-fun snd () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun GHC.List.break () Int)
(declare-fun Language.Haskell.Liquid.Prelude.liquidError () Int)
(declare-fun MyLib.treeSize () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun fix$36$$36$c$47$$61$$35$$35$a277 () Int)
(declare-fun lit$36$MyLib () Str)
(declare-fun fix$36$$36$krep_a282 () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.Classes.$36$dm$47$$61$ () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun Language.Haskell.Liquid.Prelude.times () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun VV$35$$35$F$35$$35$27 () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun GHC.Show.$36$dmshowList () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N () Int)
(declare-fun papp1 () Int)
(declare-fun Language.Haskell.Liquid.Prelude.lt () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun Language.Haskell.Liquid.Prelude.liquidAssume () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun VV$35$$35$F$35$$35$30 () Int)
(declare-fun papp4 () Int)
(declare-fun MyLib.$36$fShowBinaryTree () Int)
(declare-fun lit$36$Node$32$ () Str)
(declare-fun MyLib.Node () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805426$35$$35$d34K () Int)
(declare-fun lq_tmp$36$x$35$$35$1316 () Int)
(declare-fun MyLib.$36$fEqBinaryTree () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805424$35$$35$d34I () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805431$35$$35$d34P () Int)
(declare-fun lit$36$someFunc () Str)
(declare-fun GHC.Base.. () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R () Bool)
(declare-fun Language.Haskell.Liquid.Prelude.neq () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun addrLen () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun fix$36$$36$krep_a280 () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun lit$36$$39$Leaf () Str)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Classes.C$58$Eq () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun totalityError () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun Language.Haskell.Liquid.Prelude.crash () Int)
(declare-fun lit$36$Leaf () Str)
(declare-fun lit$36$chapter15$45$0.1.0.0$45$inplace () Str)
(declare-fun GHC.List.scanr () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Show.showSpace () Int)
(declare-fun tail () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805425$35$$35$d34J () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun Language.Haskell.Liquid.Prelude.safeZipWith () Int)
(declare-fun Language.Haskell.Liquid.Prelude.leq () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805436$35$$35$d34U () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805432$35$$35$d34Q () Bool)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun fix$36$$36$c$61$$61$$35$$35$a26X () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun isJust () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lit$36$$39$Node () Str)
(declare-fun GHC.List.span () Int)
(declare-fun l$35$$35$a24A () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun VV$35$$35$F$35$$35$15 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805456$35$$35$d35e () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun Language.Haskell.Liquid.Prelude.liquidAssumeB () Int)
(declare-fun len () Int)
(declare-fun lq_tmp$36$x$35$$35$1292 () Int)
(declare-fun fix$36$$36$cshowsPrec$35$$35$a27h () Int)
(declare-fun MyLib.treeInsert () Int)
(declare-fun GHC.List.last () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun ds_d2Wm () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805430$35$$35$d34O () Int)
(declare-fun fix$36$$36$cshow$35$$35$a27I () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805438$35$$35$d34W () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun ds_d2VI () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun Language.Haskell.Liquid.Prelude.gt () Int)
(declare-fun Language.Haskell.Liquid.Prelude.geq () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.Show.showsPrec () Int)
(declare-fun Language.Haskell.Liquid.Prelude.$61$$61$$62$ () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun Language.Haskell.Liquid.Prelude.isOdd () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun fix$36$$36$krep_a281 () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun l$35$$35$a24F () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun fix$36$$36$dOrd_a26v () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun System.IO.putStrLn () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun r$35$$35$a24G () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun MyLib.someFunc () Int)
(declare-fun VV$35$$35$F$35$$35$23 () Int)
(declare-fun r$35$$35$a24B () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Language.Haskell.Liquid.Prelude.plus () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun papp5 () Int)
(declare-fun x$35$$35$a24C () Int)
(declare-fun GHC.Classes.$36$fOrdInt () Int)
(declare-fun lit$36$BinaryTree () Str)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lq_tmp$36$x$35$$35$1192 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805434$35$$35$d34S () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805451$35$$35$d359 () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun ds_d2W8 () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805444$35$$35$d352 () Int)
(declare-fun GHC.List.head () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun Language.Haskell.Liquid.Prelude.liquidAssert () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun MyLib.Leaf () Int)
(declare-fun y$35$$35$a24E () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lq_tmp$36$x$35$$35$1336 () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Show.C$58$Show () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun fix$36$$36$cshowList$35$$35$a27O () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun lq_tmp$36$x$35$$35$894 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805428$35$$35$d34M () Int)
(declare-fun papp3 () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(assert (distinct lit$36$BinaryTree lit$36$$39$Node lit$36$chapter15$45$0.1.0.0$45$inplace lit$36$Leaf lit$36$$39$Leaf lit$36$someFunc lit$36$Node$32$ lit$36$MyLib))

(assert (distinct GHC.Types.False GHC.Types.True))


(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))

(assert (= (strLen lit$36$MyLib) 5))
(assert (= (strLen lit$36$Node$32$) 5))
(assert (= (strLen lit$36$someFunc) 8))
(assert (= (strLen lit$36$$39$Leaf) 5))
(assert (= (strLen lit$36$Leaf) 4))
(assert (= (strLen lit$36$chapter15$45$0.1.0.0$45$inplace) 25))
(assert (= (strLen lit$36$$39$Node) 5))
(assert (= (strLen lit$36$BinaryTree) 10))
(push 1)
(define-fun b$36$$35$$35$160 () Bool (= lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G ds_d2W8))
(define-fun b$36$$35$$35$192 () Bool (and (= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805434$35$$35$d34S) (+ (apply$35$$35$0 (as MyLib.treeSize Int) r$35$$35$a24G) 1)) (>= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805434$35$$35$d34S) 0)))
(define-fun b$36$$35$$35$161 () Bool (= lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G ds_d2W8))
(define-fun b$36$$35$$35$193 () Bool (and (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R (<= x$35$$35$a24C y$35$$35$a24E)) (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R lq_anf$36$$35$$35$7205759403792805432$35$$35$d34Q)))
(define-fun b$36$$35$$35$162 () Bool (and (= lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G (as MyLib.Leaf Int)) (= lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G ds_d2W8) (= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G) 0)))
(define-fun b$36$$35$$35$194 () Bool (and lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R (<= x$35$$35$a24C y$35$$35$a24E)) (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R lq_anf$36$$35$$35$7205759403792805432$35$$35$d34Q)))
(define-fun b$36$$35$$35$163 () Bool (= lq_anf$36$$35$$35$7205759403792805423$35$$35$d34H 0))
(define-fun b$36$$35$$35$164 () Bool (= lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G ds_d2W8))
(define-fun b$36$$35$$35$168 () Bool (and (= lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G ds_d2W8) (= lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as MyLib.Node Int) ds_d2Wm) l$35$$35$a24A) r$35$$35$a24B)) (= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805422$35$$35$d34G) (+ (+ 1 (apply$35$$35$0 (as MyLib.treeSize Int) l$35$$35$a24A)) (apply$35$$35$0 (as MyLib.treeSize Int) r$35$$35$a24B)))))
(define-fun b$36$$35$$35$169 () Bool (= lq_anf$36$$35$$35$7205759403792805424$35$$35$d34I 1))
(define-fun b$36$$35$$35$170 () Bool (= lq_anf$36$$35$$35$7205759403792805425$35$$35$d34J lq_anf$36$$35$$35$7205759403792805424$35$$35$d34I))
(define-fun b$36$$35$$35$171 () Bool (and (= lq_anf$36$$35$$35$7205759403792805426$35$$35$d34K (apply$35$$35$0 (as MyLib.treeSize Int) l$35$$35$a24A)) (>= lq_anf$36$$35$$35$7205759403792805426$35$$35$d34K 0)))
(define-fun b$36$$35$$35$172 () Bool (= lq_anf$36$$35$$35$7205759403792805427$35$$35$d34L (+ lq_anf$36$$35$$35$7205759403792805425$35$$35$d34J lq_anf$36$$35$$35$7205759403792805426$35$$35$d34K)))
(define-fun b$36$$35$$35$173 () Bool (and (= lq_anf$36$$35$$35$7205759403792805428$35$$35$d34M (apply$35$$35$0 (as MyLib.treeSize Int) r$35$$35$a24B)) (>= lq_anf$36$$35$$35$7205759403792805428$35$$35$d34M 0)))
(define-fun b$36$$35$$35$239 () Bool (and (= (apply$35$$35$0 (as MyLib.treeSize Int) VV$35$$35$F$35$$35$11) (+ (+ 1 (apply$35$$35$0 (as MyLib.treeSize Int) l$35$$35$a24F)) (apply$35$$35$0 (as MyLib.treeSize Int) r$35$$35$a24G))) (>= (apply$35$$35$0 (as MyLib.treeSize Int) VV$35$$35$F$35$$35$11) 0)))
(define-fun b$36$$35$$35$240 () Bool (and (= (apply$35$$35$0 (as MyLib.treeSize Int) VV$35$$35$F$35$$35$15) (+ (+ 1 (apply$35$$35$0 (as MyLib.treeSize Int) l$35$$35$a24F)) (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805434$35$$35$d34S))) (>= (apply$35$$35$0 (as MyLib.treeSize Int) VV$35$$35$F$35$$35$15) 0)))
(define-fun b$36$$35$$35$177 () Bool (>= (apply$35$$35$0 (as MyLib.treeSize Int) ds_d2VI) 0))
(define-fun b$36$$35$$35$241 () Bool (and (= (apply$35$$35$0 (as MyLib.treeSize Int) VV$35$$35$F$35$$35$23) (+ (+ 1 (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805430$35$$35$d34O)) (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805431$35$$35$d34P))) (>= (apply$35$$35$0 (as MyLib.treeSize Int) VV$35$$35$F$35$$35$23) 0)))
(define-fun b$36$$35$$35$178 () Bool (and (= lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N ds_d2VI) (>= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N) 0)))
(define-fun b$36$$35$$35$242 () Bool (= VV$35$$35$F$35$$35$27 (+ lq_anf$36$$35$$35$7205759403792805427$35$$35$d34L lq_anf$36$$35$$35$7205759403792805428$35$$35$d34M)))
(define-fun b$36$$35$$35$179 () Bool (and (= lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N ds_d2VI) (>= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N) 0)))
(define-fun b$36$$35$$35$243 () Bool (= VV$35$$35$F$35$$35$30 lq_anf$36$$35$$35$7205759403792805423$35$$35$d34H))
(define-fun b$36$$35$$35$180 () Bool (and (= lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N (as MyLib.Leaf Int)) (= lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N ds_d2VI) (= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N) 0) (>= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N) 0)))
(define-fun b$36$$35$$35$181 () Bool (and (= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805430$35$$35$d34O) 0) (>= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805430$35$$35$d34O) 0)))
(define-fun b$36$$35$$35$182 () Bool (and (= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805431$35$$35$d34P) 0) (>= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805431$35$$35$d34P) 0)))
(define-fun b$36$$35$$35$183 () Bool (and (= lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N ds_d2VI) (>= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N) 0)))
(define-fun b$36$$35$$35$185 () Bool (>= (apply$35$$35$0 (as MyLib.treeSize Int) l$35$$35$a24F) 0))
(define-fun b$36$$35$$35$186 () Bool (>= (apply$35$$35$0 (as MyLib.treeSize Int) r$35$$35$a24G) 0))
(define-fun b$36$$35$$35$91 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$187 () Bool (and (= lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N ds_d2VI) (= lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as MyLib.Node Int) y$35$$35$a24E) l$35$$35$a24F) r$35$$35$a24G)) (= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N) (+ (+ 1 (apply$35$$35$0 (as MyLib.treeSize Int) l$35$$35$a24F)) (apply$35$$35$0 (as MyLib.treeSize Int) r$35$$35$a24G))) (>= (apply$35$$35$0 (as MyLib.treeSize Int) lq_anf$36$$35$$35$7205759403792805429$35$$35$d34N) 0)))
(define-fun b$36$$35$$35$188 () Bool (= lq_anf$36$$35$$35$7205759403792805432$35$$35$d34Q (<= x$35$$35$a24C y$35$$35$a24E)))
(define-fun b$36$$35$$35$189 () Bool (and (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R (<= x$35$$35$a24C y$35$$35$a24E)) (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R lq_anf$36$$35$$35$7205759403792805432$35$$35$d34Q)))
(define-fun b$36$$35$$35$94 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$190 () Bool (and (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R (<= x$35$$35$a24C y$35$$35$a24E)) (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R lq_anf$36$$35$$35$7205759403792805432$35$$35$d34Q)))
(define-fun b$36$$35$$35$191 () Bool (and (not lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R) (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R (<= x$35$$35$a24C y$35$$35$a24E)) (= lq_anf$36$$35$$35$7205759403792805433$35$$35$d34R lq_anf$36$$35$$35$7205759403792805432$35$$35$d34Q)))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$239 b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$183 b$36$$35$$35$185 b$36$$35$$35$186 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$94))
(push 1)
(assert (not (= (apply$35$$35$0 (as MyLib.treeSize Int) VV$35$$35$F$35$$35$11) (+ (apply$35$$35$0 (as MyLib.treeSize Int) ds_d2VI) 1))))
(check-sat)
(pop 1)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$192 b$36$$35$$35$240 b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$183 b$36$$35$$35$185 b$36$$35$$35$186 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$94 b$36$$35$$35$190 b$36$$35$$35$191))
(push 1)
(assert (not (= (apply$35$$35$0 (as MyLib.treeSize Int) VV$35$$35$F$35$$35$15) (+ (apply$35$$35$0 (as MyLib.treeSize Int) ds_d2VI) 1))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$177 b$36$$35$$35$241 b$36$$35$$35$178 b$36$$35$$35$179 b$36$$35$$35$180 b$36$$35$$35$181 b$36$$35$$35$182 b$36$$35$$35$91 b$36$$35$$35$94))
(push 1)
(assert (not (= (apply$35$$35$0 (as MyLib.treeSize Int) VV$35$$35$F$35$$35$23) (+ (apply$35$$35$0 (as MyLib.treeSize Int) ds_d2VI) 1))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$160 b$36$$35$$35$164 b$36$$35$$35$168 b$36$$35$$35$169 b$36$$35$$35$170 b$36$$35$$35$171 b$36$$35$$35$172 b$36$$35$$35$173 b$36$$35$$35$242 b$36$$35$$35$91 b$36$$35$$35$94))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$27 0)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$160 b$36$$35$$35$161 b$36$$35$$35$162 b$36$$35$$35$163 b$36$$35$$35$243 b$36$$35$$35$91 b$36$$35$$35$94))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$30 0)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(exit)
